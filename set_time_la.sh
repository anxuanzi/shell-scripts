#!/bin/bash

# ==============================================================================
# Script Name: set_time_la.sh
# Description: This script sets the system timezone to America/Los_Angeles
#              and enables/starts the chronyd service for time synchronization.
# Author:      FantasticTony (Generated by AI Assistant)
# Version:     1.0
# Date:        06-04-2025
# ==============================================================================

# Source utility functions
UTILS_PATH="$(dirname "$0")/utils.sh"
if [ ! -f "${UTILS_PATH}" ]; then
    echo -e "\033[0;31m[ERROR] utils.sh not found at ${UTILS_PATH}. Please ensure it's in the same directory as this script.\033[0m"
    exit 1
fi
source "${UTILS_PATH}"

# --- Script Start ---
# The msg_info from utils.sh will confirm it's loaded.
msg_info "Starting timezone and chronyd configuration for America/Los_Angeles..."

# --- Timezone Configuration ---
TARGET_TIMEZONE="America/Los_Angeles"
msg_info "Attempting to set timezone to ${TARGET_TIMEZONE}..."

# Check current timezone
CURRENT_TIMEZONE_LINE=$(timedatectl status | grep 'Time zone')
msg_info "Current timezone details: ${CURRENT_TIMEZONE_LINE}"

if echo "${CURRENT_TIMEZONE_LINE}" | grep -q "${TARGET_TIMEZONE}"; then
    msg_info "Timezone is already set to ${TARGET_TIMEZONE}. Skipping 'timedatectl set-timezone'."
else
    # Set the timezone
    timedatectl set-timezone "${TARGET_TIMEZONE}"
    check_exit_status "Failed to set timezone to ${TARGET_TIMEZONE}." "Timezone successfully set to ${TARGET_TIMEZONE}."
    # Confirm the change
    msg_info "Verifying timezone change..."
    NEW_TIMEZONE_LINE=$(timedatectl status | grep 'Time zone')
    msg_success "Timezone confirmation: ${NEW_TIMEZONE_LINE}"
fi

# --- Chronyd Configuration ---
CHRONY_SERVICE_NAME="chronyd"
msg_info "Attempting to enable and start ${CHRONY_SERVICE_NAME} service..."

# Check if chronyd is already active and enabled
IS_ACTIVE=$(systemctl is-active "${CHRONY_SERVICE_NAME}")
IS_ENABLED=$(systemctl is-enabled "${CHRONY_SERVICE_NAME}")

if [ "${IS_ACTIVE}" = "active" ] && [ "${IS_ENABLED}" = "enabled" ]; then
    msg_info "${CHRONY_SERVICE_NAME} service is already active and enabled. Skipping 'systemctl enable --now'."
else
    # Enable and start the NTP-based synchronization
    systemctl enable --now "${CHRONY_SERVICE_NAME}"
    check_exit_status "Failed to enable and start ${CHRONY_SERVICE_NAME}." "${CHRONY_SERVICE_NAME} enabled and started successfully."
fi

# Confirm chronyd status
msg_info "Verifying ${CHRONY_SERVICE_NAME} status..."
FINAL_IS_ACTIVE=$(systemctl is-active "${CHRONY_SERVICE_NAME}")
FINAL_IS_ENABLED=$(systemctl is-enabled "${CHRONY_SERVICE_NAME}")

msg_success "${CHRONY_SERVICE_NAME} service status: Active => ${FINAL_IS_ACTIVE}, Enabled => ${FINAL_IS_ENABLED}"

if [ "${FINAL_IS_ACTIVE}" != "active" ]; then
    msg_error "${CHRONY_SERVICE_NAME} did not become active. Please check service logs: journalctl -u ${CHRONY_SERVICE_NAME}"
    exit 1
fi

msg_success "===== Timezone and chronyd configuration complete. ====="
exit 0
