#!/bin/bash

# ==============================================================================
# Script Name: setup.sh
# Description: Entry point script to download other utility scripts and
#              provide a menu to execute them.
# Author:      FantasticTony (Generated by AI Assistant)
# Version:     1.0
# Date:        06-04-2025
# ==============================================================================

# --- Configuration ---
# !!! IMPORTANT: Update these variables if you are using a fork !!!
GITHUB_USER="anxuanzi"
GITHUB_REPO="shell-scripts"
BRANCH="main" # Or your specific branch

# Construct the base URL for raw GitHub content
REPO_BASE_URL="https://raw.githubusercontent.com/${GITHUB_USER}/${GITHUB_REPO}/${BRANCH}/"

# Scripts to download
# utils.sh must be first if other scripts depend on it immediately,
# but for setup.sh, it will be sourced only after being downloaded.
SCRIPTS_TO_DOWNLOAD=(
    "utils.sh"
    "fta_os_init.sh"
    "install_docker.sh"
    "install_portainer.sh"
    "set_time_chicago.sh"
    "set_time_la.sh"
)

# Directory to download scripts to. Using current directory.
DOWNLOAD_DIR="."
# For a dedicated directory:
# DOWNLOAD_DIR="./fta_scripts"
# mkdir -p "${DOWNLOAD_DIR}" # Ensure it exists

# --- Basic Output Functions (used before utils.sh is available) ---
_log_msg() {
    local type="$1"
    local msg="$2"
    echo "[${type}] ${msg}"
}
_info() { _log_msg "INFO" "$1"; }
_success() { _log_msg "SUCCESS" "$1"; }
_error() { _log_msg "ERROR" "$1"; }
_warn() { _log_msg "WARNING" "$1"; }

# --- Core Functions ---

detect_download_tool() {
    _info "Detecting download tool..."
    if command -v curl &> /dev/null; then
        # -s: silent, -S: show error, -L: follow redirects, -f: fail fast, -O: output to file named like remote
        DOWNLOAD_CMD_BASE="curl -sSLf"
        DOWNLOAD_SUFFIX_O="-O" # Saves to remote name
        _success "Using curl."
        return 0
    elif command -v wget &> /dev/null; then
        # -q: quiet, -O: output to specific file
        DOWNLOAD_CMD_BASE="wget -q"
        DOWNLOAD_SUFFIX_O="-O" # wget requires filename after -O
        _success "Using wget."
        return 0
    else
        _error "Neither curl nor wget found. Please install one of them and try again."
        exit 1
    fi
}

download_script() {
    local script_name="$1"
    local target_path="${DOWNLOAD_DIR}/${script_name}"
    local full_url="${REPO_BASE_URL}${script_name}"

    _info "Downloading ${script_name} from ${full_url}..."

    if [[ "$DOWNLOAD_CMD_BASE" == "curl"* ]]; then
        ${DOWNLOAD_CMD_BASE} "${full_url}" -o "${target_path}" # curl needs -o for specific path
    elif [[ "$DOWNLOAD_CMD_BASE" == "wget"* ]]; then
        ${DOWNLOAD_CMD_BASE} "${DOWNLOAD_SUFFIX_O}" "${target_path}" "${full_url}"
    fi

    if [ $? -ne 0 ]; then
        _error "Failed to download ${script_name}."
        return 1
    else
        _success "${script_name} downloaded successfully to ${target_path}."
        chmod +x "${target_path}"
        if [ $? -ne 0 ]; then
            _warn "Failed to make ${script_name} executable. You might need to do it manually."
        else
            _info "${script_name} made executable."
        fi
        return 0
    fi
}

download_all_scripts() {
    _info "Starting download of all scripts..."
    detect_download_tool # Sets DOWNLOAD_CMD_BASE and DOWNLOAD_SUFFIX_O
    if [ $? -ne 0 ]; then # Check if detect_download_tool failed
        return 1
    fi

    local all_successful=true
    for script in "${SCRIPTS_TO_DOWNLOAD[@]}"; do
        download_script "${script}"
        if [ $? -ne 0 ]; then
            all_successful=false
            _error "Download failed for ${script}. Cannot proceed reliably."
            break # Stop on first failure
        fi
    done

    if [ "$all_successful" = true ]; then
        _success "All scripts downloaded successfully."
        # Source utils.sh if it was downloaded and now exists
        if [ -f "${DOWNLOAD_DIR}/utils.sh" ]; then
            _info "Sourcing utils.sh for enhanced output..."
            # shellcheck source=./utils.sh
            source "${DOWNLOAD_DIR}/utils.sh"
            # Reassign messaging functions if utils.sh was sourced
            # This is a simple way to switch; a more robust way might involve checking if functions exist
            # Need to ensure these are not local to this function if we want them to persist
            # For now, this reassignment will be local to this function's scope if not careful.
            # However, the main menu loop will call these global _info, _success etc.
            # Let's redefine them globally after sourcing.
            if declare -f msg_info &>/dev/null; then # Check if utils.sh functions are available
                _info() { msg_info "$1"; }
                _success() { msg_success "$1"; }
                _error() { msg_error "$1"; }
                _warn() { msg_warning "$1"; }
                _info "Enhanced messaging functions are now active."
            else
                _warn "utils.sh was found, but its functions (e.g., msg_info) are not defined. Using basic output."
            fi
        else
            _warn "utils.sh not found after download. Using basic output."
        fi
        return 0
    else
        _error "One or more scripts failed to download. Please check the errors above."
        return 1
    fi
}

display_menu() {
    # Use 'clear' if not sourced by another script that wants to control output
    # if [ -t 1 ]; then # Check if stdout is a terminal
    # clear
    # fi
    echo
    _info "============================================="
    _info "          FTA System Setup Menu"
    _info "============================================="
    echo
    _info "Please choose an option:"
    echo "1. Initialize OS (Run fta_os_init.sh)"
    echo "2. Install Docker (Run install_docker.sh)"
    echo "3. Install Portainer & Watchtower (Run install_portainer.sh)"
    echo "4. Set Timezone to Chicago (Run set_time_chicago.sh)"
    echo "5. Set Timezone to Los Angeles (Run set_time_la.sh)"
    echo "---------------------------------------------"
    echo "6. Re-download/Update all scripts"
    echo "7. Exit"
    echo
    read -r -p "Enter your choice [1-7]: " USER_CHOICE
}

handle_choice() {
    local choice="$1"
    local script_to_run=""

    case "$choice" in
        1) script_to_run="fta_os_init.sh"; _info "Selected: Initialize OS";;
        2) script_to_run="install_docker.sh"; _info "Selected: Install Docker";;
        3) script_to_run="install_portainer.sh"; _info "Selected: Install Portainer & Watchtower";;
        4) script_to_run="set_time_chicago.sh"; _info "Selected: Set Timezone to Chicago";;
        5) script_to_run="set_time_la.sh"; _info "Selected: Set Timezone to Los Angeles";;
        6)
            _info "Selected: Re-download/Update all scripts"
            download_all_scripts # This will re-source utils.sh and redefine _info etc.
            return
            ;;
        7)
            _info "Exiting setup script. Goodbye!"
            exit 0
            ;;
        *)
            _error "Invalid choice. Please try again."
            return
            ;;
    esac

    if [ -n "${script_to_run}" ]; then
        local script_path="${DOWNLOAD_DIR}/${script_to_run}"
        if [ -f "${script_path}" ] && [ -x "${script_path}" ]; then
            _info "Executing ${script_to_run}..."
            echo # Add a newline for better separation before the script starts
            # Execute the script. It will source utils.sh itself.
            "${script_path}"
            _info "Finished executing ${script_to_run}."
        else
            _error "${script_to_run} not found or not executable at ${script_path}."
            _warn "Please try re-downloading the scripts (Option 6)."
        fi
    fi
    echo
    read -r -p "Press Enter to return to the menu..."
}

# --- Main Script Flow ---

_info "Welcome to the FTA System Setup Script!"
_info "This script will help you download and run system configuration utilities."
echo

# Initial download of scripts
if ! download_all_scripts; then
    # Error messages handled within download_all_scripts
    _error "Critical failure during initial script download. Exiting."
    exit 1
fi

# Main menu loop
while true; do
    display_menu
    handle_choice "${USER_CHOICE}"
done
